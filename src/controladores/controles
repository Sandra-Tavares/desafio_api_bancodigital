const { contas, saques, depositos, transferencias } = require('../bancodedados')
const { format } = require('date-fns')
let numeroConta = 3;

const listarContas = (req, res) => {
    if (!contas) {
        return res.status(404).json({ mensagem: "Conta bancária não encontada!" });
    }
    return res.status(200).json(contas);
};

const criarContaBancaria = (req, res) => {
    let { nome, cpf, data_nascimento, telefone, email, senha } = req.body;

    const novaConta = {
        numero: numeroConta,
        saldo: 0,
        usuario: {
            nome,
            cpf,
            data_nascimento,
            telefone,
            email,
            senha
        }
    }
    contas.push(novaConta);
    numeroConta++
    return res.status(201).json({ mensagem: "Conta criada com sucesso" });
};

const atualizarDados = (req, res) => {
    let { nome, cpf, data_nascimento, telefone, email, senha } = req.body;
    const { numeroConta } = req.params;

    const contaExiste = contas.find(conta => Number(conta.numero) === Number(numeroConta));
    if (!contaExiste) {
        return res.status(400).json({ mensagem: "Conta não existe" })
    };

    if (contaExiste.usuario.cpf != cpf) {
        const existeCpf = contas.find(elemento => elemento.usuario.cpf === cpf);
        if (existeCpf)
            return res.status(400).json({ mensagem: "Já existe uma conta com o cpf informado" })
    };

    if (contaExiste.usuario.email != email) {
        const existeEmail = contas.find(elemento => elemento.usuario.email === email);
        if (existeEmail)
            return res.status(400).json({ mensagem: "Já existe uma conta com o email informado" })
    };
    contaExiste.usuario.nome = nome;
    contaExiste.usuario.cpf = cpf;
    contaExiste.usuario.data_nascimento = data_nascimento;
    contaExiste.usuario.telefone = telefone;
    contaExiste.usuario.email = email;
    contaExiste.usuario.senha = senha;

    return res.status(201).json({ mensagem: 'Dados  alterados.' })
};


const removerConta = (req, res) => {
    const { numeroConta } = req.params

    if (isNaN(numeroConta)) {
        return res.status(400).json({ mensagem: 'Conta  não  existe.' });
    };

    const contaExiste = contas.find(conta => Number(conta.numero) === Number(numeroConta));

    if (contaExiste.saldo > 0) {
        return res.status(404).json({ mensagem: 'A conta só pode ser removida se o valor for zero.' });
    }

    const indiceConta = contas.findIndex(conta => conta.numeroConta === Number(req.params.numeroConta));
    contas.splice(indiceConta, 1);
    return res.status(201).json({ mensagem: "Conta removida." })
}

const efetuarDeposito = (req, res) => {
    const { numero_conta, valor } = req.body

    if (!numero_conta) {
        return res.status(400).json({ mensagem: "Obrigatório informar o numero da conta" })
    };

    if (!valor) {
        return res.status(400).json({ mensagem: "Obrigatório informar o valor" })
    };

    const contaExiste = contas.find(conta => Number(conta.numero) === Number(numero_conta));

    if (!contaExiste) {
        return res.status(404).json({ mensagem: 'Conta não  existe.' });
    };
    if (valor <= 0) {
        return res.status(404).json({ mensagem: 'Valor incorreto' });
    } else {
        contaExiste.saldo = contaExiste.saldo + valor
    }
    const dataAtual = new Date()
    const dataFormatada = format(dataAtual, " yyyy-MM-dd k:m:s")
    const registroDeposito = {
        data: dataFormatada,
        numero_conta,
        valor: valor
    }
    depositos.push(registroDeposito);
    return res.send(registroDeposito)
}

const efetuarSaque = (req, res) => {
    const { numero_conta, valor, senha } = req.body

    if (!numero_conta) {
        return res.status(400).json({ mensagem: "Obrigatório informar o numero da conta" })
    };

    if (!valor) {
        return res.status(400).json({ mensagem: "Obrigatório informar o valor" })
    };

    if (!senha) {
        return res.status(400).json({ mensagem: "Obrigatório informar a senha" })
    };

    const contaExiste = contas.find(conta => Number(conta.numero) === Number(numero_conta));

    if (!contaExiste) {
        return res.status(404).json({ mensagem: 'Conta não  existe.' });
    };

    if (senha != contaExiste.usuario.senha) {
        return res.status(400).json({ mensagem: "Senha informada não existe" })
    }
    if (contaExiste.saldo <= 0) {
        return res.status(404).json({ mensagem: 'saldo insuficiente' });

    } else {
        contaExiste.saldo = contaExiste.saldo - valor
    }
    const dataAtual = new Date()
    const dataFormatada = format(dataAtual, " yyyy-MM-dd k:m:s")
    const registroDeSaque = {
        data: dataFormatada,
        numero_conta,
        valor: valor
    }
    saques.push(registroDeSaque)
    return res.send(registroDeSaque)
}
const efetuarTransferência = (req, res) => {
    const { numero_conta_origem, numero_conta_destino, valor, senha } = req.body;

    if (!numero_conta_origem) {
        return res.status(400).json({ mensagem: "Obrigatório informar a conta de origem" });
    };


    if (!numero_conta_destino) {
        return res.status(400).json({ mensagem: "Obrigatório informar a conta destino" });
    };

    if (!valor) {
        return res.status(400).json({ mensagem: "Obrigatório informar o valor a ser transferido" });
    };

    if (!senha) {
        return res.status(400).json({ mensagem: "Obrigatório informar a senha da conta de origem" });
    };

    const contaOrigemExiste = contas.find(conta => Number(conta.numero) === Number(numero_conta_origem));

    if (!contaOrigemExiste) {
        return res.status(404).json({ mensagem: 'Conta não  existe.' });
    };

    const contaDestinoExiste = contas.find(conta => Number(conta.numero) === Number(numero_conta_destino));
    if (!contaDestinoExiste) {
        return res.status(404).json({ mensagem: 'Conta não  existe.' });
    };

    if (senha != contaOrigemExiste.usuario.senha) {
        return res.status(400).json({ mensagem: "Senha informada não existe" });
    };

    if (contaOrigemExiste.saldo < valor) {
        return res.status(400).json({ mensagem: "Saldo insuficiente" });
    };
    const retirarValorContaOrigem = contaOrigemExiste.saldo - valor;
    const adicionarValorContaDestino = contaDestinoExiste.saldo + valor;

    const dataAtual = new Date()
    const dataFormatada = format(dataAtual, " yyyy-MM-dd k:m:s")
    const registroDeTransferencia = {
        data: dataFormatada,
        numero_conta_origem,
        numero_conta_destino,
        valor
    }
    transferencias.push(registroDeTransferencia)
    return res.send(registroDeTransferencia);
};
const consultarSaldo = (req, res) => {
    const { numero_conta, senha } = req.query;

    if (!numero_conta) {
        return res.status(400).json({ mensagem: "Obrigatório informar o numero da conta" });
    };

    if (!senha) {
        return res.status(400).json({ mensagem: "Obrigatório informar a senha" });
    };
    const contaExiste = contas.find(conta => Number(conta.numero) === Number(numero_conta));

    if (senha != contaExiste.usuario.senha) {
        return res.status(400).json({ mensagem: "Senha informada não existe" });
    };

    return res.status(200).json({ Saldo: contaExiste.saldo });
};

const consultarExtrato = (req, res) => {
    const { numero_conta, senha } = req.query;

    if (!numero_conta) {
        return res.status(400).json({ mensagem: "Obrigatório informar o numero da conta" });
    };

    if (!senha) {
        return res.status(400).json({ mensagem: "Obrigatório informar a senha" });
    };
    const contaExiste = contas.find(conta => Number(conta.numero) === Number(numero_conta));

    if (senha != contaExiste.usuario.senha) {
        return res.status(400).json({ mensagem: "Senha informada não existe" });
    };
    const transferenciasEnviadas = transferencias.filter(conta => Number(conta.numero_conta_origem) === Number(numero_conta));
    const transferenciasRecebidas = transferencias.filter(conta => Number(conta.numero_conta_destino) === Number(numero_conta));
    const saquesEfetuados = saques.filter(conta => Number(conta.numero_conta) === Number(numero_conta));
    const depositosEfetuados = depositos.filter(conta => Number(conta.numero_conta) === Number(numero_conta));
    return res.status(200).json({
        ExtratoDeMoniventacao: {
            transferenciasEnviadas,
            transferenciasRecebidas
        },
        saques: saquesEfetuados,
        depositos: depositosEfetuados
    });

}

module.exports = {
    listarContas,
    criarContaBancaria,
    atualizarDados,
    removerConta,
    efetuarDeposito,
    efetuarSaque,
    efetuarTransferência,
    consultarSaldo,
    consultarExtrato,
}